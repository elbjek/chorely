// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  name        String?
  householdId Int?

  chores    Chore[]
  points    Point[]
  household Household? @relation(fields: [householdId], references: [id])

  @@map("user")
}

model Chore {
  id              Int              @id @default(autoincrement())
  name            String
  frequency       Int
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  point           Int
  householdChores HouseholdChore[]

  @@map("chore")
}

model Household {
  id              Int              @id @default(autoincrement())
  name            String
  householdChores HouseholdChore[]
  users           User[]

  @@map("household")
}

model HouseholdChore {
  householdId Int
  choreId     Int
  household   Household @relation(fields: [householdId], references: [id])
  chore       Chore     @relation(fields: [choreId], references: [id])

  @@id([householdId, choreId])
  @@map("household_chore")
}

//one to many user to points

model Point {
  id        Int      @id @default(autoincrement())
  points    Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("point")
}
